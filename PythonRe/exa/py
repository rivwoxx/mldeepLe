import numpy as np

A = np.array([     
        [2,-1,1,1],
        [1,2,-1,-1],
        [-1,2,2,2],
        [1,-1,2,1]    
    ], dtype=np.dtype(float)) 
b = np.array([6,3,14,8], dtype=np.dtype(float))

d = np.linalg.det(A)
x = np.linalg.solve(A,b)

print(f"Determinant {d}, solution {x}")

def MultiplyRow(M, row_num, row_num_multiple):
    # .copy() function is required here to keep the original matrix without any changes
    M_new = M.copy()     
    # exchange row_num of the matrix M_new with its multiple by row_num_multiple
    # Note: for simplicity, you can drop check if  row_num_multiple has non-zero value, which makes the operation valid
    M_new[row_num] = M_new[row_num] * row_num_multiple 
    return M_new
    
def AddRows(M, row_num_1, row_num_2, row_num_1_multiple):
    M_new = M.copy()     
    # multiply row_num_1 by row_num_1_multiple and add it to the row_num_2, 
    # exchanging row_num_2 of the matrix M_new with the result
    M_new[row_num_2] = row_num_1_multiple * M_new[row_num_1]  + M_new[row_num_2]
    return M_new

def SwapRows(M, row_num_1, row_num_2):
    M_new = M.copy()     
    # exchange row_num_1 and row_num_2 of the matrix M_new
    M_new[[row_num_1,row_num_2]] = M_new[[row_num_2, row_num_1]]
    return M_new

A_test = np.array([
        [1, -2, 3, -4],
        [-5, 6, -7, 8],
        [-4, 3, -2, 1], 
        [8, -7, 6, -5]
    ], dtype=np.dtype(float))
print("Original matrix:")
print(A_test)

print("\nOriginal matrix after its third row is multiplied by -2:")
print(MultiplyRow(A_test,2,-2))

print("\nOriginal matrix after exchange of the third row with the sum of itself and first row multiplied by 4:")
print(AddRows(A_test,0,2,4))

print("\nOriginal matrix after exchange of its first and third rows:")
print(SwapRows(A_test,0,2))

Asystem = np.hstack((A, b.reshape((4, 1))))
print(f"\n 4X4 STACKED {Asystem}")
A_ref = SwapRows(Asystem,0,1)

print(f"\n ***SwapRows(Asystem,0,1) {A_ref}")

A_ref = AddRows(A_ref,0,1,-2)

print(f"\n ***AddRows(A_ref,0,1,-2) {A_ref}")

A_ref[2] = A_ref[0] + A_ref[2]

print(f"\n A_ref[0] + A_ref[2]  {A_ref}" )

A_ref = AddRows(A_ref,0,3,-1)

print(f"\n AddRows(A_ref(A_ref,0,2,-1)) {A_ref}")

A_ref = AddRows(A_ref,2,3,1)

print(f"\n AddRows(A_ref,2,3,1) {A_ref}")

A_ref = SwapRows(A_ref,1,3)
print(f"\n SwapRows(A_ref,1,3) {A_ref}")

A_ref = AddRows(A_ref,2,3,1)

print(f"\n AddRows(A_ref,2,3,1) {A_ref}")

A_ref = AddRows(A_ref,1,2,-4)

print(f"A_ref = AddRows(A_ref,1,2,-4) {A_ref}")

# A_ref = AddRows(A_ref,1,3,1)
A_ref[3] = A_ref[1] + A_ref[3]
print(f"AddRows(A_ref,1,3,1) {A_ref}")

A_ref = AddRows(A_ref,3,2,2)

print(f"AddRows(A_ref,3,2,1) {A_ref}")

A_ref = AddRows(A_ref,2,3,-8)
print(f"AddRows(A_ref,2,3,-8) {A_ref}")

A_ref = MultiplyRow(A_ref,3,-1/17)
print(A_ref)

x_4 = A_ref[3,4]
# print(f"{A_ref[3,4]}")

x_3 = A_ref[2,4] - A_ref[2,3]*x_4
print(A_ref[2,4])
# print(x_3)

x_2 = A_ref[1,4]-A_ref[1,3]*x_4-A_ref[1,2]*x_3
# print(x_2)

x_1 = A_ref[0,4]-A_ref[0,3]*x_4-A_ref[0,2]*x_3-A_ref[0,1]*x_2
# print(x_1)

print(x_1, x_2, x_3, x_4)

# A_diag = AddRows(A_ref,3,2,-3)

# print(A_diag)

A_diag = AddRows(A_ref,3,2,-3)
    
A_diag = AddRows(A_ref,3,1,-3)

print(A_diag)

# print diagonal matrix of A_ref
A_diag = np.diag(np.diag(A_ref))
print(A_diag)